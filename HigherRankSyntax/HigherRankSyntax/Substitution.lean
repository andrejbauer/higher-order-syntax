import HigherRankSyntax.Syntax
import HigherRankSyntax.Renaming

def Substitution Œ≥ Œ¥ := ‚àÄ {{Œ±}}, Var Œ± Œ≥ ‚Üí Expr (Œ¥ ‚äï Œ±)
infix:25 " ‚ÜíÀ¢ " => Substitution

namespace Substitution

/-- The identity substutition -/
def id {Œ≥} : Œ≥ ‚ÜíÀ¢ Œ≥ :=
  fun {Œ±} x => x.varLeft ‚óÉ (fun {Œ≤} (y : Var Œ≤ Œ±) => ‚ü¶ Var.varRight ‚áë ≥ _ ‚üß ≥ (id y))
termination_by Œ≥.rank
decreasing_by apply rank_Var_lt ; assumption

@[inherit_doc]
notation " ùüôÀ¢ " => Substitution.id

/-- Lift a renaming to a substitution -/
def lift {Œ≥ Œ¥} (f : Œ≥ ‚Üí ≥ Œ¥) : Œ≥ ‚ÜíÀ¢ Œ¥ :=
  fun {_} x => ùüôÀ¢ (f x)

/-- Extend a substutution on the right. This is generally used when
    a substitution needs to be used under a binder. -/
def extend {Œ≥ Œ¥} (u : Œ≥ ‚ÜíÀ¢ Œ¥) Œ∑ : Œ≥ ‚äï Œ∑ ‚ÜíÀ¢ Œ¥ ‚äï Œ∑
| _, .varLeft x => ‚ü¶ Var.varLeft ‚áë ≥ _ ‚üß ≥ (u x)
| _, .varRight y => ùüôÀ¢ y.varRight

@[inherit_doc]
infixl:95 " ‚áëÀ¢ " => Substitution.extend

/-- Compose a renaming and a substutition. -/
def renaming_comp {Œ± Œ≤ Œ≥} (f : Œ≤ ‚Üí ≥ Œ≥) (u : Œ± ‚ÜíÀ¢ Œ≤) : Œ± ‚ÜíÀ¢ Œ≥ :=
  fun ‚¶ÉŒ¥‚¶Ñ x => ‚ü¶ f ‚áë ≥ Œ¥ ‚üß ≥ u x

@[inherit_doc]
infixr:95 "  ≥‚àòÀ¢ " => Substitution.renaming_comp

/-- Compose a substitution and a renaming -/
def comp_renaming {Œ± Œ≤ Œ≥} (u : Œ≤ ‚ÜíÀ¢ Œ≥) (f : Œ± ‚Üí ≥ Œ≤) : Œ± ‚ÜíÀ¢ Œ≥ :=
  fun ‚¶É_‚¶Ñ x => u (f x)

@[inherit_doc]
infixr:95 " À¢‚àò ≥ " => Substitution.comp_renaming

/-- Sum of substitutions -/
def sum {Œ± Œ≤ Œ≥} (u : Œ± ‚ÜíÀ¢ Œ≥) (v : Œ≤ ‚ÜíÀ¢ Œ≥) : Œ± ‚äï Œ≤ ‚ÜíÀ¢ Œ≥
| _, .varLeft x => u x
| _, .varRight y => v y

@[inherit_doc]
infix:30 " ‚äïÀ¢ " => Substitution.sum

/-- The action of a substitution on an expression that is identity on a left and right part of a shape. -/
def act' {Œ± Œ≤ Œ≥ Œ¥ : Shape} (u : Œ≤ ‚ÜíÀ¢ Œ± ‚äï Œ≥) : Expr ((Œ± ‚äï Œ≤) ‚äï Œ¥) ‚Üí Expr ((Œ± ‚äï Œ≥) ‚äï Œ¥)
  | .varLeft (.varLeft x) ‚óÉ ts =>
    .varLeft (.varLeft x) ‚óÉ (fun ‚¶É_‚¶Ñ y => ‚ü¶ .assocLeft ‚üß ≥ act' u (‚ü¶ .assocRight ‚üß ≥ ts y))
  | .varLeft (.varRight x) ‚óÉ ts =>
    ‚ü¶ .cancelZeroRight ‚üß ≥ act' (fun ‚¶É_‚¶Ñ y => ‚ü¶ .assocLeft ‚üß ≥ act' u (‚ü¶ .assocRight ‚üß ≥ ts y)) (‚ü¶ .insertZeroRight ‚üß ≥ u x)
  | .varRight x ‚óÉ ts =>
    .varRight x ‚óÉ (fun ‚¶É_‚¶Ñ y => ‚ü¶ .assocLeft ‚üß ≥ act' u (‚ü¶ .assocRight ‚üß ≥ ts y))
termination_by e => (Œ≤.rank, Expr.sizeOf e)
decreasing_by
¬∑ apply Prod.Lex.right ; rw [Renaming.eq_size] ; apply Expr.sizeOfArg
¬∑ apply Prod.Lex.right ; rw [Renaming.eq_size] ; apply Expr.sizeOfArg
¬∑ apply Prod.Lex.left
  apply rank_Var_lt x
¬∑ apply Prod.Lex.right ; rw [Renaming.eq_size] ; apply Expr.sizeOfArg

/-- The action of a substitution on an expression -/
def act {Œ≥ Œ¥} (u : Œ≥ ‚ÜíÀ¢ Œ¥) : Expr Œ≥ ‚Üí Expr Œ¥
  | x ‚óÉ ts =>
    ‚ü¶ .cancelZeroRight ‚àò ≥ .cancelZeroRight ‚üß ≥ act' (fun ‚¶É_‚¶Ñ y => ‚ü¶ .insertZeroRight‚áë ≥ _ ‚üß ≥ act (u ‚áëÀ¢ _) (ts y)) (‚ü¶ .insertZeroRight ‚üß ≥ u x)

@[inherit_doc]
notation:60 " ‚ü¶" u "‚üßÀ¢ " e:61 => Substitution.act u e

/-- Composition of substitutions -/
def comp {Œ≥ Œ¥ Œ∏} (u : Œ≥ ‚ÜíÀ¢ Œ¥) (v : Œ¥ ‚ÜíÀ¢ Œ∏) : Œ≥ ‚ÜíÀ¢ Œ∏
| Œ≤, x => act (v ‚áëÀ¢ Œ≤) (u x)

@[inherit_doc]
notation:90 g:90 " ‚àòÀ¢ " f:91 => Substitution.comp f g

/-- The extension of identity is identity -/
def extend_id {Œ≥ Œ¥} : @id Œ≥ ‚áëÀ¢ Œ¥ = ùüôÀ¢ := by
  funext Œ± x
  cases x
  case varRight => simp!
  case varLeft x =>
    dsimp! ; unfold id ; simp!
    funext Œ≤ y
    rw [‚Üê Renaming.act_comp]
    congr
    funext Œ¥ z
    cases z <;> simp! [Renaming.comp]

/-- The action of the identity substitution -/
def act_id {Œ≥} (e : Expr Œ≥) : ‚ü¶ ùüôÀ¢ ‚üßÀ¢ e = e := by
  induction e
  case apply Œ± Œ¥ x ts ih => sorry


end Substitution
